import datetime

import pytz
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy.orm import sessionmaker

from db.add import add_payment
from db.create_db import Payment, engine
from handlers.api_3xui import create_client_for_user, generate_vpn_link
from keyboards.default import main_keyboard, choice_time_keyboard, payment_keyboard, confirm_or_deny_keyboard

SUBSCRIPTION_TEXTS = {
    "1_day": ["1 –¥–µ–Ω—å", 1],
    "3_day": ["3 –¥–Ω—è", 3],
    "7_day": ["7 –¥–Ω–µ–π", 7],
    "1_month": ["1 –º–µ—Å—è—Ü", 30],
    "3_month": ["3 –º–µ—Å—è—Ü–∞", 90],
    "1_year": ["1 –≥–æ–¥", 365]
}
PAYMENT_METHOD = ""
DURATION = 0
router = Router()
SessionLocal = sessionmaker(bind=engine)


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–æ–º
@router.message(Command("start")) # –∫–æ–º–∞–Ω–¥–∞ /start -> –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞/–ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN-–¥–æ—Å—Ç—É–ø.", reply_markup=main_keyboard)


@router.callback_query(F.data == "to_main_menu") # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞/–ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
async def handle_back_to_main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard)


@router.callback_query(F.data == "buy_access") # –í—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def handle_buy_access(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=choice_time_keyboard)


@router.callback_query(F.data.in_(SUBSCRIPTION_TEXTS.keys())) # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def handle_subscription_choice(callback: CallbackQuery):
    duration = SUBSCRIPTION_TEXTS[callback.data][0]
    await callback.answer()
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: `{duration}`", parse_mode="Markdown")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard)
    global DURATION
    DURATION = SUBSCRIPTION_TEXTS[callback.data][1]


@router.callback_query(F.data == "pay_sbp") # –û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü
async def pay_sbp_handler(callback: CallbackQuery):
    await callback.answer()
    photo = FSInputFile("images/qr_sbp.png")
    await callback.message.answer_photo(
        photo=photo,
        caption=(
            "üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –°–ë–ü –ø–æ QR-–∫–æ–¥—É."
        )
    )
    await callback.message.answer(
        f"‚ùó‚ùó‚ùó–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–ø–ª–∞—Ç–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–≥ id \nüÜî Telegram ID: `{callback.from_user.id}`",
        reply_markup=confirm_or_deny_keyboard,
        parse_mode="Markdown"
    )
    global PAYMENT_METHOD
    PAYMENT_METHOD = "–æ–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü"


@router.callback_query(F.data == "pay_paid") # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def pay_paid_handler(callback: CallbackQuery):
    tg_user_id = callback.from_user.id
    username = callback.from_user.username
    payment_method = PAYMENT_METHOD
    status = "pending"
    duration = DURATION

    success = add_payment(tg_user_id, username, payment_method, status, duration)
    if success:
        await callback.message.answer("üíæ–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN")
    else:
        await callback.message.answer("‚ùó–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ä—Ç–æ—Ä—É (@pavelvpgg1)")


# –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "my_account") # –ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
async def handle_my_account(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("–¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç:")


# –ê–¥–º–∏–Ω–∫–∞
@router.message(Command("approve")) # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å
async def approve_payment(message: Message):
    if message.from_user.id not in [2100039698]:  # —Ç–≥ –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
        return

    try:
        _, user_id_str = message.text.split()
        user_id = int(user_id_str)
    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /approve <user_id>")
        return

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π
    session = SessionLocal()
    try:
        payment = session.query(Payment).filter_by(tg_user_id=user_id).first()

        if not payment or payment.status != "pending":
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        duration = payment.duration
        payment.status = "approved"
        payment.approved_by = message.from_user.id
        payment.confirmed_at = datetime.datetime.now(pytz.timezone("Etc/GMT-5"))
        session.commit()
        create_client_for_user(tg_user_id=user_id, duration_days=duration)
        vpn_link = generate_vpn_link(f"{user_id}@MrPavlik.ru")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä—É VPN-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"üîê –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ VPN: `{vpn_link}`\n\n"
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é: ..."
            ),
            parse_mode="Markdown"
        )

        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ä—Ç–æ—Ä—É (@pavelvpgg1)")
        print(f"[approve error] {e}")
        session.rollback()
    finally:
        session.close()
