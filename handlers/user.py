import datetime

import pytz
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from sqlalchemy.orm import sessionmaker

from db.add import add_payment
from db.create_db import Payment, engine
from handlers.api_3xui import create_client_for_user, generate_vpn_link
from keyboards.default import (main_keyboard,
                               choice_time_keyboard,
                               payment_keyboard,
                               confirm_or_deny_keyboard,
                               back_to_main_menu_keyboard)
from utils.states import PaymentState

SUBSCRIPTION_TEXTS = {
    "1_day": ["1 –¥–µ–Ω—å", 1],
    "3_day": ["3 –¥–Ω—è", 3],
    "7_day": ["7 –¥–Ω–µ–π", 7],
    "1_month": ["1 –º–µ—Å—è—Ü", 30],
    "3_month": ["3 –º–µ—Å—è—Ü–∞", 90],
    "1_year": ["1 –≥–æ–¥", 365]
}
ADMIN_ID = {
    "@pavelvpgg1": 2100039698,
    "@Orin286": 1171128013,
    "@DdOaNrYk_0": 1894484454
}

router = Router()
SessionLocal = sessionmaker(bind=engine)


# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —é–∑–µ—Ä–æ–º
@router.message(Command("start"))
async def start_handler(message: Message):
    """–∫–æ–º–∞–Ω–¥–∞ /start -> –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞/–ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å VPN-–¥–æ—Å—Ç—É–ø.",
        reply_markup=main_keyboard
    )


@router.callback_query(F.data == "to_main_menu")
async def handle_back_to_main(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞/–ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_keyboard
    )


@router.callback_query(F.data == "buy_access")
async def handle_buy_access(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=choice_time_keyboard
    )


@router.callback_query(F.data == "support")
async def handle_support(callback: CallbackQuery):
    """–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    await callback.answer()
    await callback.message.answer(
        "üë®‚Äçüíª –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @pavelvpgg1",
        reply_markup=back_to_main_menu_keyboard
    )


@router.callback_query(F.data.in_(SUBSCRIPTION_TEXTS.keys()))
async def handle_subscription_choice(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    duration_label, duration_days = SUBSCRIPTION_TEXTS[callback.data]
    await callback.message.answer(
        f"‚åõ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: `{duration_label}`",
        parse_mode="Markdown"
    )
    await callback.message.answer(
        "üîÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_keyboard
    )

    await state.update_data(duration=duration_days)
    await state.set_state(PaymentState.choosing_payment_method)


@router.callback_query(F.data == "pay_sbp")
async def pay_sbp_handler(callback: CallbackQuery, state: FSMContext):
    """–û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü"""
    photo = FSInputFile("images/qr_sbp.png")
    await callback.message.answer_photo(
        photo=photo,
        caption=(
            "üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –°–ë–ü –ø–æ QR-–∫–æ–¥—É."
        )
    )
    await callback.message.answer(
        f"‚ùó‚ùó‚ùó–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–ø–ª–∞—Ç–µ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–≥ id \nüÜî –í–∞—à telegram ID: `{callback.from_user.id}`",
        reply_markup=confirm_or_deny_keyboard,
        parse_mode="Markdown"
    )
    await state.update_data(payment_method="–°–ë–ü")
    await state.set_state(PaymentState.awaiting_confirmation)


@router.callback_query(F.data == "pay_paid")
async def pay_paid_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω –æ–ø–ª–∞—Ç–∏–ª"""
    tg_user_id = callback.from_user.id
    username = callback.from_user.username
    data = await state.get_data()
    duration = data.get("duration")
    payment_method = data.get("payment_method")
    status = "pending"

    success = add_payment(tg_user_id, username, payment_method, status, duration)
    if success:
        await callback.message.answer(
            "üíæ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ VPN",
            reply_markup=back_to_main_menu_keyboard
        )
        await state.clear()
    else:
        await callback.message.answer(
            "‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ä—Ç–æ—Ä—É (@pavelvpgg1)"
        )


# –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "my_account")
async def handle_my_account(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = SessionLocal()
    try:
        payment = session.query(Payment).filter_by(tg_user_id=int(callback.from_user.id)).first()

        if not payment:
            await callback.message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ –¥–æ—Å—Ç—É–ø")
            return

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment_method = payment.payment_method
        status = payment.status
        if status == "approved":
            active_until = (datetime.datetime.now(pytz.timezone("Asia/Yekaterinburg")) + datetime.timedelta(
                days=payment.duration)).strftime("%d.%m.%Y")
            days_left = ((payment.created_at + datetime.timedelta(days=payment.duration)) - payment.created_at).days
            approved_by = [key for key, value in ADMIN_ID.items() if value == payment.approved_by][0]
            await callback.message.answer(
                text=("‚öôÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
                      f"üìõ –ò–º—è: `{callback.from_user.first_name}`\n"
                      f"‚åõ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: `{active_until}`\n"
                      f"‚è≥ –î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {days_left} –¥–Ω–µ–π\n"
                      f"üí∏ –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏: `{payment_method}`\n"
                      f"‚ú® –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã: `{status}`\n"
                      f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞–¥–º–∏–Ω: `{approved_by}`\n"),
                parse_mode="Markdown", reply_markup=back_to_main_menu_keyboard
            )
        elif status == "pending":
            await callback.message.answer(
                text=("‚öôÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
                      f"üìõ –ò–º—è: `{callback.from_user.first_name}`\n"
                      f"üí∏ –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏: `{payment_method}`\n"
                      f"üïî –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã: `{status}`\n"
                      "‚ùó–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n"),
                parse_mode="Markdown", reply_markup=back_to_main_menu_keyboard
            )
        elif status == "rejected":
            await callback.message.answer(
                text=("‚öôÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:\n"
                      f"üìõ –ò–º—è: `{callback.from_user.first_name}`\n"
                      f"‚ùå –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã: `{status}`\n"
                      "‚ùó–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ï—Å–ª–∏ —ç—Ç–∞ –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"),
                parse_mode="Markdown", reply_markup=back_to_main_menu_keyboard
            )

    except Exception as e:
        await callback.message.answer(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            reply_markup=back_to_main_menu_keyboard
        )
        print(f"[account error] {e}")
        session.rollback()
    finally:
        session.close()


# –ê–¥–º–∏–Ω–∫–∞
@router.message(Command("approve"))
async def approve_payment(message: Message):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –í–ü–ù —Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in list(ADMIN_ID.values()):  # —Ç–≥ –∞–π–¥–∏ –∞–¥–º–∏–Ω–æ–≤
        return

    try:
        _, user_id_str = message.text.split()
        user_id = int(user_id_str)
    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /approve <user_id>")
        return

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π
    session = SessionLocal()
    try:
        payment = session.query(Payment).filter_by(tg_user_id=user_id).first()

        if not payment or payment.status != "pending":
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        duration = payment.duration
        payment.status = "approved"
        payment.approved_by = message.from_user.id
        payment.confirmed_at = datetime.datetime.now(pytz.timezone("Etc/GMT-5"))
        session.commit()
        await create_client_for_user(tg_user_id=user_id, duration_days=duration)
        vpn_link = await generate_vpn_link(f"{user_id}@MrPavlik.ru")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä—É VPN-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.bot.send_message(
            chat_id=user_id,
            text=(
                f"üîê –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ VPN: `{vpn_link}`\n\n"
                "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–¢—É—Ç–æ—Ä–∏–∞–ª –ø–æ VPN'—É‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n"
                "Androidüì±:\n"
                "1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º *v2rayNG* (–Ω–∏–∂–µ apk —Ñ–∞–π–ª –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `v2rayNG_1.9.30_APKPure.apk`)\n"
                "2) –ó–∞—Ö–æ–¥–∏–º -> –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ \"*+*\" -> *–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞* -> –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å -> –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å -> –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É \"*–ü—É—Å–∫*\"\n\n"
                "IPhoneüì±:\n"
                "1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º *V2RayTun* —Å AppStore ([—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ](https://apps.apple.com/kz/app/v2raytun/id6476628951))\n"
                "2) –ó–∞—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
                "3) –í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –Ω–∞–∂–∏–º–∞–µ–º \"*+*\" -> \"*–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞*\" (–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç) -> –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                "4) –ù–∞–∂–∏–º–∞–µ–º *–∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞* –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ\n\n"
                "Windowsüñ•Ô∏è:\n"
                "1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å *Nekobox* (–Ω–∏–∂–µ zip –∞—Ä—Ö–∏–≤ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `nekoray-4.0.1-2024-12-12-windows64.zip`)\n"
                "2) –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤\n"
                "3) –ó–∞–ø—É—Å–∫–∞–µ–º \"*nekobox.exe*\"\n"
                "4) –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É \"*–°–µ—Ä–≤–µ—Ä*\" -> \"*–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞*\" (–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç) -> —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É —Å–≤–µ—Ä—Ö—É –Ω–∞ –ø—É–Ω–∫—Ç–µ \"*–†–µ–∂–∏–º TUN*\" -> –ù–∞–∂–∏–º–∞–µ–º *–ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏* –ø–æ –ø–æ—è–≤–∏–≤—à–µ–º—É—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é -> –í—ã–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç \"*–ó–∞–ø—É—Å—Ç–∏—Ç—å*\"\n\n"
                "Linuxüñ•Ô∏è:\n"
                "1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å *Nekobox* (–Ω–∏–∂–µ zip –∞—Ä—Ö–∏–≤ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `nekoray-4.0.1-2024012012-linux64.zip`)\n"
                "2) –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤\n"
                "3) –ó–∞–ø—É—Å–∫–∞–µ–º \"*nekobox.exe*\"\n"
                "4) –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É \"*–°–µ—Ä–≤–µ—Ä*\" -> \"*–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞*\" (–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç) -> —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É —Å–≤–µ—Ä—Ö—É –Ω–∞ –ø—É–Ω–∫—Ç–µ \"*–†–µ–∂–∏–º TUN*\" -> –ù–∞–∂–∏–º–∞–µ–º *–ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏* –ø–æ –ø–æ—è–≤–∏–≤—à–µ–º—É—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é -> –í—ã–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç \"*–ó–∞–ø—É—Å—Ç–∏—Ç—å*\"\n\n"
            ),
            parse_mode="Markdown"
        )

        # —Ñ–∞–π–ª –¥–ª—è Android
        v2ray_android = FSInputFile("files/v2rayNG_1.9.30_APKPure.apk")
        await message.bot.send_document(
            chat_id=user_id,
            document=v2ray_android,
            caption="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Android"
        )

        # —Ñ–∞–π–ª –¥–ª—è Windows
        neko_windows = FSInputFile("files/nekoray-4.0.1-2024-12-12-windows64.zip")
        await message.bot.send_document(
            chat_id=user_id,
            document=neko_windows,
            caption="üñ•Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Windows"
        )

        # —Ñ–∞–π–ª –¥–ª—è Linux
        neko_linux = FSInputFile("files/nekoray-4.0.1-2024-12-12-linux64.zip")
        await message.bot.send_document(
            chat_id=user_id,
            document=neko_linux,
            caption="üñ•Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Linux")

        await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç—É–ø–∞!")
        print(f"[approve error] {e}")
        session.rollback()
    finally:
        session.close()


@router.message(Command("reject"))
async def reject_payment(message: Message):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –í–ü–ù —Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in list(ADMIN_ID.values()):
        return

    try:
        _, user_id_str = message.text.split()
        user_id = int(user_id_str)
    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /reject <user_id>")
        return

    session = SessionLocal()
    try:
        payment = session.query(Payment).filter_by(tg_user_id=user_id).first()

        if not payment or payment.status != "pending":
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω/–æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            return

        payment.status = "rejected"
        session.commit()

        await message.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ VPN-–¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–µ.",
            reply_markup=back_to_main_menu_keyboard
        )

        await message.answer(f"üö´ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    except Exception as e:
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞!")
        print(f"[reject error] {e}")
        session.rollback()
    finally:
        session.close()

# –¥–µ–±–∞–≥
# @router.callback_query()
# async def debug_callback(callback: CallbackQuery):
#     print("[DEBUG] callback.data =", callback.data)
#     await callback.answer("‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback.")
